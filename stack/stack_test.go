package stack

import (
	"fmt"
	"testing"
)

func TestStack(t *testing.T) {

	//s
	//s := "()()()())()"
	//fmt.Println(IsMatched(s))

	//fmt.Println(longestValidParentheses(s))
	//fmt.Println(longestValidParenthesesII(s))

	//剑指 Offer 09. 用两个栈实现队列

	//queue := Constructor()
	//fmt.Println(queue.DeleteHead())
	//fmt.Println(queue.arr)
	//queue.AppendTail(5)
	//queue.AppendTail(2)
	//fmt.Println(queue.arr)
	//fmt.Println(queue.DeleteHead())
	//fmt.Println(queue.arr)
	//fmt.Println(queue.DeleteHead())
	//fmt.Println(queue.arr)
	//fmt.Println(queue.DeleteHead())

	minStack := ConstructorMinStack()
	minStack.Push(-2)
	minStack.Push(-0)
	minStack.Push(-3)
	fmt.Print(minStack.Min())
	//fmt.Println(minStack.arr, minStack.min)
	minStack.Pop()
	//fmt.Println(minStack.arr, minStack.min)
	fmt.Println(minStack.Top())
	fmt.Println(minStack.Min())
}
